{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","img/stephan-seeber.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callBack","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e7af189.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport type QuestionsState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n  }))\r\n};","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5);","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 1100px;\r\n    background: #ebfeff;\r\n    border-radius: 10px;\r\n    border: 2px solid #0085a3;\r\n    padding: 20px;\r\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n    text-align: center;\r\n\r\n    p{\r\n        font-size: 1rem;\r\n    }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n    \r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n\r\n    button{\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({correct, userClicked}) =>\r\n            correct \r\n                ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n                : !correct && userClicked\r\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n        border: 3px solid #fff;\r\n        box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25);\r\n    }\r\n`","import React from 'react';\r\n// Types\r\nimport {AnswerObject} from '../App';\r\n// Styles\r\nimport { Wrapper, ButtonWrapper} from './QuestionCard.styles'\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callBack: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({ \r\n    question,\r\n    answers,\r\n    callBack,\r\n    userAnswer,\r\n    questionNr,\r\n    totalQuestions\r\n}) => (\r\n    <Wrapper>\r\n        <p className=\"number\">\r\n            Question: {questionNr}/{totalQuestions} \r\n        </p>\r\n        <p dangerouslySetInnerHTML={{__html: question }} />\r\n        <div>\r\n            {answers.map(answer => (\r\n                <ButtonWrapper \r\n                    key={answer}\r\n                    correct={userAnswer?.correctAnswer === answer}\r\n                    userClicked={userAnswer?.answer === answer}\r\n                >\r\n                    <button disabled={!!userAnswer} value={answer} onClick={callBack}>\r\n                        <span dangerouslySetInnerHTML={{__html: answer}}></span>\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard\r\n","export default __webpack_public_path__ + \"static/media/stephan-seeber.73705809.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\r\n// @ts-ignore\r\nimport BGImage from './img/stephan-seeber.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html{\r\n        height: 100%;\r\n    }\r\n\r\n    body{\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        background-position: center;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    *{\r\n        box-sizing: border-box;\r\n        font-family: 'Catamaran', sans-serif;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div `\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    > p {\r\n        color: #fff;\r\n    }\r\n\r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1{\r\n        font-family: 'Fascinate Inline', cursive;\r\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2x #0085a3);\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .start, .next{\r\n        cursor: pointer;\r\n        background: linear-gradient(180deg, #fff, #ffcc91);\r\n        border: 2px solid #d38558;\r\n        box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n`","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\n// types\nimport { QuestionsState, Difficulty } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: any) => {\n    if (!gameOver) {\n      // User's answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save the answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n  \n  const nextQuestion = () => {\n    // move to the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if(nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true);\n    }else{\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n        <GlobalStyle />\n        <Wrapper className=\"App\">\n          <h1>React QUIZ</h1>\n          {gameOver  || userAnswers.length === TOTAL_QUESTIONS ? (\n              <button className=\"start\" onClick={startTrivia}>\n                Start\n              </button>\n          ): null}\n\n          {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n          {loading && <p>Loading Questions ...</p>}\n          {!loading && !gameOver && ( \n              <QuestionCard\n                questionNr={number + 1}\n                totalQuestions={TOTAL_QUESTIONS}\n                question={questions[number].question}\n                answers={questions[number].answers}\n                userAnswer={userAnswers ? userAnswers[number] : undefined}\n                callBack={checkAnswer}\n              />\n          )}\n          {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n              <button className=\"next\" onClick={nextQuestion}>\n                Next Question\n              </button>\n          ): null}\n        </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}